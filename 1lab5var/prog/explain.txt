
**Описание работы:**

1. **Меню выбора действия:**
   - **0**: Ввод строки из файла. Пользователь указывает путь к файлу, программа читает строку и 
   выполняет поиск чисел с помощью `searchString`.
   - **1**: Ввод строки с клавиатуры. Пользователь вводит строку, программа выполняет поиск чисел.
   - **2**: Поиск всех возможных подстрок и их проверка на корректность с помощью `printValidSubstrings`.
   - **3**: Выход из программы.

2. **Обработка выбора:**
   - В зависимости от выбора пользователя выполняется соответствующее действие.
   - После выполнения действия буфер ввода очищается для корректного дальнейшего ввода.

## Принцип работы детерминированного конечного автомата (ДКА) в программе

### 1. Состояния автомата

Автомат имеет 4 состояния:
- **0**: Ошибочное состояние.
- **1**: Начальное состояние, ожидание первой цифры числа.
- **2**: Состояние после прочтения первой цифры (допустимо продолжение).
- **3**: Конечное состояние, достигнуто после чтения обозначающей буквы (`b`, `o`, `O`, `h`, `H`).

### 2. Таблица переходов

Таблица `Transitions` определяет переходы между состояниями на основе класса текущего символа.

| Текущее состояние | DecDigit (1) | HexDigit (2) | Letter (3) | Unknown (0) |
|-------------------|--------------|--------------|------------|-------------|
| 0                 | 0            | 0            | 0          | 0           |
| 1                 | 2            | 0            | 0          | 0           |
| 2                 | 2            | 2            | 3          | 0           |
| 3                 | 0            | 0            | 0          | 0           |

**Описание переходов:**
- **Состояние 1 (начальное):**
  - При получении `DecDigit` переходит в состояние `2`.
  - Любой другой класс символов ведет в состояние `0`.

- **Состояние 2:**
  - При получении `DecDigit` или `HexDigit` остается в состоянии `2`.
  - При получении `Letter` переходит в конечное состояние `3`.
  - Любой другой класс символов ведет в состояние `0`.

- **Состояние 3 (конечное):**
  - Любой входной символ переводит автомат в состояние `0`.

### 3. Логика распознавания чисел

1. **Начало распознавания:**
   - Автомат начинается в состоянии `1`.
   - При прочтении цифры (`0-9`) переходит в состояние `2`.

2. **Продолжение распознавания:**
   - В состоянии `2` могут находится дополнительные цифры (`DecDigit` или `HexDigit`), оставаясь в состоянии `2`.
   - При прочтении обозначающей буквы (`b`, `o`, `O`, `h`, `H`) переходит в конечное состояние `3`.

3. **Окончание распознавания:**
   - В конечном состоянии `3` автомат фиксирует найденное число.
   - Если число не соответствует правилам (например, двоичное число содержит цифры, отличные от `0` и `1`), 
выполняется дополнительная проверка и извлечение корректной части числа.
   - После обработки числа автомат сбрасывается в начальное состояние `1` для поиска следующего числа.

### 4. Обработка ошибок и некорректных чисел

- Если автомат переходит в состояние `0` (ошибка), происходит сброс и продолжение поиска с следующего символа.
- Для обеспечения корректности чисел проверяются дополнительные условия:
  - **Двоичное число (`b`)** должно содержать только `0` и `1`.
  - **Восьмеричное число (`o`, `O`)** должно содержать только цифры от `0` до `7`.
  - **Шестнадцатеричное число (`h`, `H`)** допускает цифры от `0` до `9` и буквы от `A` до `F`.

## Заключение

Программа эффективно использует ДКА для распознавания чисел в различных системах счисления, следуя заданным правилам синтаксиса FASM. 
Таблица переходов обеспечивает детерминированное поведение автомата, что позволяет точно и быстро находить корректные числовые подстроки в входных данных.