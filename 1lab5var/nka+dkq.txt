Для создания недетерминированного конечного автомата (НКА) и детерминированного конечного автомата (ДКА) на основе регулярных выражений или проверки форматов чисел (например, двоичных, восьмеричных, шестнадцатеричных), нужно понять, как выполняется проверка каждого из типов чисел.

### 1. **Недетерминированный конечный автомат (НКА)**

Недетерминированный конечный автомат может "угадывать", какой путь выбрать для обработки ввода, и не обязательно однозначно переходит в одно состояние для каждого символа. В контексте задачи с проверкой чисел, НКА можно реализовать с помощью нескольких параллельных путей, которые проверяют, является ли введённая строка двоичным, восьмеричным или шестнадцатеричным числом.

#### Пример НКА для задачи:

- Начальное состояние принимает строку.
- Если строка заканчивается на `B`, проверяется каждый символ на принадлежность к алфавиту `{0, 1}`.
- Если строка заканчивается на `o` или `O`, проверяется каждый символ на принадлежность к алфавиту `{0-7}`.
- Если строка заканчивается на `H` или `h`, проверяется, что первый символ — это цифра, а остальные — символы из `{0-9, A-F, a-f}`.

### 2. **Детерминированный конечный автомат (ДКА)**

Детерминированный конечный автомат в каждый момент времени находится в одном состоянии и для каждого символа однозначно определяет следующее состояние. В данном случае мы можем построить ДКА, который последовательно проверяет символы строки в зависимости от её типа (двоичное, восьмеричное, шестнадцатеричное).

#### Шаги для преобразования к ДКА:

- Начальное состояние `q0`.
- В зависимости от последнего символа строки (например, `B`, `o`, `H`), переход осуществляется в одно из состояний:
    - Если последний символ `B`, переходим в состояние `q1`, где проверяются только символы `0` или `1`.
    - Если последний символ `o` или `O`, переходим в состояние `q2`, где проверяются символы из диапазона `0-7`.
    - Если последний символ `H` или `h`, переходим в состояние `q3`, где первый символ проверяется на принадлежность к диапазону `0-9`, а остальные символы могут быть из диапазонов `0-9`, `A-F`, `a-f`.

### **Пример построения НКА:**

1. Начальное состояние `q0`.
2. Из состояния `q0` возможны три направления:
    - Если строка заканчивается на `B`, переходим в состояние `qB`, где принимаются только символы `0` и `1`.
    - Если строка заканчивается на `o` или `O`, переходим в состояние `qO`, где принимаются символы от `0` до `7`.
    - Если строка заканчивается на `H` или `h`, переходим в состояние `qH`, где первый символ должен быть из диапазона `0-9`, а остальные символы могут быть либо цифрами, либо буквами от `A` до `F`.

### **Пример построения ДКА:**

1. Начальное состояние `q0`:
    - Проверяем последний символ строки:
      - Если это `B`, переходим в состояние `q1`, где проверяются только символы `0` и `1`.
      - Если это `o` или `O`, переходим в состояние `q2`, где проверяются символы от `0` до `7`.
      - Если это `H` или `h`, переходим в состояние `q3`.
2. В состоянии `q3`:
    - Первый символ должен быть цифрой (`0-9`).
    - Все последующие символы могут быть либо цифрами (`0-9`), либо буквами от `A` до `F` (либо в верхнем, либо в нижнем регистре).
3. Если в любом состоянии поступает недопустимый символ, переходим в "некорректное состояние" и строка отклоняется.

---

### Описание состояний ДКА для шестнадцатеричных чисел:

1. **Начальное состояние `q0`**:
    - Если последний символ — `H` или `h`, проверяем первый символ.
    - Если первый символ — цифра, переходим в состояние `q3`.
    - Иначе отклоняем строку.

2. **Состояние `q3`**:
    - Каждый последующий символ должен быть либо цифрой (`0-9`), либо буквой из диапазона `A-F` или `a-f`.
    - Если любой символ не подходит, строка отклоняется.

Аналогичные шаги можно построить для двоичных и восьмеричных чисел.